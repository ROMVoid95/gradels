import org.gradle.api.provider.ProviderFactory

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'eclipse'
    id "com.gradle.plugin-publish" version "1.2.0"
}

group = "io.github.romvoid95"
description = "A set of Gradle plugins"
version = "0.1.0"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly gradleApi()
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.6.0.202305301015-r'
    implementation 'org.bouncycastle:bcpg-jdk15on:1.70'
    implementation 'com.google.guava:guava:32.1.1-jre'
    
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

gradlePlugin {
    website = 'https://github.com/ROMVoid95/gradels'
    vcsUrl = 'https://github.com/ROMVoid95/gradels'
    plugins {
        mvn {
            id = "io.github.romvoid95.mvn"
            displayName = "romvoid95 Maven Central plugin"
            description = "romvoid95 Maven Central plugin"
            implementationClass = "io.github.romvoid95.MvnCentralPlugin"
            tags.set(['maven', 'maven-central'])
        }
    }
}

import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

def srcFolder = file("C:\\gradle\\gradle-${project.gradle.gradleVersion}\\src")

eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                String version = project.gradle.gradleVersion
                String gradleSourceDirectory = srcFolder.getAbsolutePath()
                classpath.entries.each { entry ->
                    if (entry in AbstractLibrary && entry.library.path.contains('generated-gradle-jars')) {
                        entry.sourcePath =
                                new FileReferenceFactory().fromPath(gradleSourceDirectory)
                    }
                }
            }
        }
    }
}
