plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'io.freefair.lombok' version '8.+'
    id 'maven-publish'
    id 'eclipse'
}

group = "space.tscg.gradle"
description = "A set of Gradle plugins"
version = "2.2.0"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
    withSourcesJar()
}

repositories {
    gradlePluginPortal()
}

dependencies {
    compileOnly gradleApi()
        
    api group: 'com.vanniktech.maven.publish',      name: 'com.vanniktech.maven.publish.gradle.plugin',     version: 'latest.release'
    api group: 'com.vanniktech',                    name: 'gradle-maven-publish-plugin',                    version: 'latest.release'
    api group: 'org.eclipse.jgit',                  name: 'org.eclipse.jgit',                               version: '6.6.0.202305301015-r'
    api group: 'com.fasterxml.jackson.core',        name: 'jackson-databind',                               version: 'latest.release'
    api group: 'com.squareup.okhttp3',              name: 'okhttp',                                         version: 'latest.release'
    api group: 'org.sonatype.gradle.plugins.scan',  name: 'org.sonatype.gradle.plugins.scan.gradle.plugin', version: 'latest.release'
    api group: 'org.sonatype.gradle.plugins',       name: 'scan-gradle-plugin',                             version: 'latest.release'
    
    compileOnlyApi group: 'org.bouncycastle',           name: 'bcpg-jdk15on',       version: '1.70'
    compileOnlyApi group: 'com.google.guava',           name: 'guava',              version: 'latest.release'
    compileOnlyApi group: 'org.panda-lang',             name: 'expressible',        version: '1.3.5'
    compileOnlyApi group: 'org.jetbrains',              name: 'annotations',        version: 'latest.release'
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

gradlePlugin {
    plugins {
        defaults {
            id = "tscg.defaults"
            displayName = "gradle defaults plugin"
            description = "gradle defaults plugin"
            implementationClass = "space.tscg.gradle.GradleDefaultsPlugin"
        }
    }
}

publishing {
    repositories {
        maven {
            name 'EzGradle'
            if(project.hasProperty('EZG_USER') && project.hasProperty('EZG_PASSWORD')) {
                url 'https://ezgradle.site/plugins'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = project.property('EZG_USER')
                    password = project.property('EZG_PASSWORD')
                }
            } else {
                url 'file://' + project.rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

def srcFolder = file("C:\\gradle\\gradle-${project.gradle.gradleVersion}\\src")

tasks.named('eclipse') {
	doLast {
		mkdir 'build/pluginUnderTestMetadata'
	}
}

eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                String version = project.gradle.gradleVersion
                String gradleSourceDirectory = srcFolder.getAbsolutePath()
                classpath.entries.each { entry ->
                    if (entry in AbstractLibrary && entry.library.path.contains('generated-gradle-jars')) {
                        entry.sourcePath =
                                new FileReferenceFactory().fromPath(gradleSourceDirectory)
                    }
                }
            }
        }
    }
}
